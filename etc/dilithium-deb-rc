#!/bin/sh
### BEGIN INIT INFO
# Provides:          fvwm
# Should-Start:      console-screen xfs xfstt dbus network-manager
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     4
# Default-Stop:      0 1 2 3 5 6
# Short-Description: fvwm-crystal Display Manager
# Description:       Debian init script to start Graphical User Interface
### END INIT INFO
#
# Author:       Wiley Edward Hill <wileyhill@gmail.com>
#
set -e

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="dilithium crystal launcher daemon"
PNAME=dilithium
DAEMON=/usr/bin/dilithium
PIDFILE=/var/run/dilithium.pid

DEFAULT_DISPLAY_MANAGER=/etc/X11/default-display-manager
DEFAULT_DISPLAY_CRYSTAL=/etc/X11/cyrstal-display-manager

SCRIPTNAME=/etc/init.d/$PNAME

test -x $DAEMON || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$PNAME ] && . /etc/default/$PNAME
export SERVER_ARGUMENTS
export SUDO_USER

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions, Depend on lsb-base (>= 3.0-6) to ensure that
# this file is present.
. /lib/lsb/init-functions

if [ -r /etc/default/locale ]; then
  . /etc/default/locale
  export LANG LANGUAGE
fi

if $HEED_DEFAULT_DISPLAY_MANAGER && [ -r $DEFAULT_DISPLAY_MANAGER ] ; then
  DISPLAY_MANAGER=$(basename "$(cat $DEFAULT_DISPLAY_MANAGER 2> /dev/null)")
else
  if [ "x$DISPLAY_MANAGER" = "x" ]; then
    DISPLAY_MANAGER=$(basename "$(cat $DEFAULT_DISPLAY_CRYSTAL 2> /dev/null)")
  fi
fi

gen_config() {
  # GSettings configuration uses dconf update to generate a fvwm profile
  if [ -d /var/lib/fvwm ]; then
    needed=no
    if [ -f /var/lib/fvwm/dconf/db/fvwm ]; then
       if [ "/usr/share/fvwm/dconf" -nt /var/lib/fvwm/dconf/db/fvwm ]; then
          needed=yes
       fi
    else
      needed=yes
    fi
    if [ "$needed" = yes ]; then
      echo "updating fvwm dconf profile"
      rm -rf /var/lib/fvwm/dconf
      mkdir -p /var/lib/fvwm/dconf/profile
      ln -s /usr/share/fvwm/dconf-profile /var/lib/fvwm/dconf/profile/fvwm
      ln -s /usr/share/fvwm/dconf/*-settings /var/lib/fvwm/dconf/db/fvwm.d/
      dconf update /var/lib/fvwm/dconf/db 2> /dev/null
    fi
  fi
}
echo "Dilithium daemon=$DAEMON, $DAEMON_ARGS, $DAEMON_OPTS" 
#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

        if grep -wqs text /proc/cmdline; then
           log_warning_msg "Not starting Display Manager; found 'text' in kernel commandline."
        else
           CONFIGURED_DAEMON=$(basename "$(cat $DISPLAY_MANAGER 2> /dev/null)")
           #gen_config
           #rm -f /var/lib/fvwm/.ICEauthority
		#$DAEMON_ARGS $DAEMON_OPTS || return 2
           start-stop-daemon --start --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS $DAEMON_OPTS || return 1
       fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $PNAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	rm -f $PIDFILE
	return "$RETVAL"
}
#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without restarting (for example, when it
        # is sent a SIGHUP), then implement that here.
	#
        set +e
        gen_config
        start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE --name $PNAME
        start-stop-daemon --stop --signal HUP --quiet --name dconf-service --user fvwm --oknodo
        set -e
	return 0
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$PNAME"
        do_start
        case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$PNAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
        status_of_proc "$DAEMON" "$PNAME" && exit 0 || exit $?
        ;;
  reload|force-reload)
	log_daemon_msg "Scheduling Reloading $DESC" "$PNAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$PNAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac
exit 0
